#--coding:utf-8--


# 时间复杂度太高了；过不了；dp[i]表示以arrar[i]作为结尾的最大和
# 但是这道题实际上和打家劫舍那道题是一回事；用哪个方法时间复杂度是线性的


# 复杂度O（n*n)
class Solution:
    def subsequence(self , n , array ):
        # write code here
        dp = [0]*n
        res = -float("inf")
        dp[0] = array[0]
        dp[1] = array[1]
        for i in range(2, n):
            for j in range(2,i+2):
                dp[i] = max(dp[i], (dp[i-j] if i-j>=0 else 0) + array[i])
            res = max(res, dp[i])
        return res


# 复杂度O（n)
class Solution1:
    def subsequence(self , n , array ):
        # write code here
        dp = [-float("inf")]*n
        # dp[0] = max(0, array[0])
        dp[0] = max(0, array[0]) # 考虑有负数
        dp[1] = max(dp[1-1], array[1])
        for i in range(2, n):
            dp[i] = max(dp[i-1], dp[i-2]+array[i])
        return dp[n-1]


arr = [18431,5989,24070,18587,30371,26535,5621,28399,16517,23977,6712,2952,22995,686,7575,23132,20926,8184,8158,2394,22152,17035,29327,31310,32734,11315,30164,23557,4969,21960,8631,24241,30624,26289,12181,1934,18656,17831,30672,26566,17598,9915,22469,14995,32668,15003,13310,11939,6266,25361,27304,24256,24335,4300,19015,15792,8216,11875,24744,31066,3057,15511,13847,6443,27490,985,18643,23480,5819,32524,23743,6053,25379,25483,29530,9157,31277,27246,32753,2690,20396,16137,11284,3200,10697,14006,16454,13949,28498,13781,1272,3708,12373,26128,12217,7202,7406,8676,12455,20576,24157,14684,29737,4178,1627,29728,27872,26471,2223,29871,31194,9411,29436,24809,32009,26593,22237,29648,13812,24701,6707,23695,13485,17841,8638,3772,30979,18526,2539,26586,4600,1229,25069,20002,20854,14230,7439,11395,26685,14785,11849,28647,32288,2092,529,27064,6769,23084,19059,15266,28858,2935,20836,12443,26029,23874,17748,10017,24670,21158,13314,28867,15280,11336,10132,19171,27661,18233,6631,21690,11611,25371,12836,9885,19755,4998,148,28286,25907,24746,11445,13749,6654,23349,18829,13313,12770,10103,17470,21449,6195,17347,8411,19368,8374,3609,31098,28969,8024,19715,29578,10447,10272,16317,8039,5977,2915,31128,30252,30787,25143,3232,27081,15760,16169,18301,15189,23751,22323,2711,2981,27964,14056,30846,23069,31632,22514,1416,26054,13947,10942,10940,9377,22729,26742,16366,17723,29859,16688,16684,28290,1040,14949,857,12759,25276,20900,7192,25444,5367,14215,236,19632,0,14055,8605,28016,30596,7244,477,16033,17506,12711,5675,11219,2225,8772,26616,14024,9476,23290,17672,31037,748,15013,32284,30984,26815,9942,30926,611,15000,22728,6332,31880,19615,30358,17384,27774,10891,19628,1631,6706,30821,15227,6425,3017,20622,11634,20513,19253,17155,10537,13301,10758,23008,21471,18992,30595,18211,30758,20838,23802,8115,25821,29776,21588,18337,14431,14377,27884,29613,27642,10839,21154,25612,13219,4430,19243,15464,1511,9394,7595,7465,24613,4283,6277,25075,6907,18654,10609,10607,25342,28074,15312,2639,10670,18928,20797,654]
# res = Solution().subsequence(6, [4,2,3,5,1,8])
res = Solution().subsequence(len(arr), arr)
print(res)